apply plugin: 'digital.wup.android-maven-publish'

def mavenPublications = []

publishing {
    repositories {
        maven {
            url = ARTIFACT_VERSION_EXTERNAL.endsWith('SNAPSHOT') ? REPOSITORY_SNAPSHOT_EXTERNAL : REPOSITORY_EXTERNAL
            credentials {
                username = EXTERNAL_USERNAME
                password = EXTERNAL_PASSWORD
            }
        }
    }
    publications {
        if (project.plugins.hasPlugin("com.android.library")) {
            android.libraryVariants.all { variant ->
                println "Setting up tasks for variant: ${variant.name}"
                if (variant.name.toLowerCase().contains("release")) {

                    def javadoc = task("${variant.flavorName}Javadoc", type: Javadoc) {
                        source = variant.javaCompile.source
                        exclude '**/BuildConfig.java'
                        exclude '**/R.java'

                        doFirst { classpath += files(variant.javaCompile.classpath.files) + files(android.bootClasspath) }
                    }

                    def javadocJar = project.tasks.create("${variant.flavorName}JavadocJar", Jar) {
                        classifier = 'javadoc'
                        from javadoc.destinationDir
                    }

                    def sourceDirs = variant.sourceSets.collect {
                        it.javaDirectories // Also includes kotlin sources if any.
                    }
                    def sourcesJar = project.tasks.create("${variant.flavorName}SourcesJar", Jar) {
                        classifier = 'sources'
                        from sourceDirs
                    }

                    def mavenPublication = "${variant.flavorName.capitalize()}AAR"
                    mavenPublications += mavenPublication
                    println "Added ${mavenPublication} as publication"
                    println "Publications available: ${mavenPublications}"
                    "${mavenPublication}"(MavenPublication) {
                        // Gets android component for build variant
                        from components.getByName("android${variant.name.capitalize()}")

                        artifact javadocJar
                        artifact sourcesJar
                        groupId ARTIFACT_GROUP_EXTERNAL
                        artifactId ARTIFACT_ID_EXTERNAL

                        version ARTIFACT_VERSION_EXTERNAL
                        pom.withXml {
                            def depsNode = asNode()["dependencies"][0]
                            if (depsNode != null) {
                                ArrayList list = new ArrayList()
                                depsNode.each { node ->
                                    if (node.groupId.toString().contains(rootProject.name)
                                            && (node.artifactId.toString().contains("bridge")
                                            || node.artifactId.toString().contains("platforms.platform"))) {
                                        list.add(node)
                                    }
                                }
                                for (def node : list) {
                                    depsNode.remove(node)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
