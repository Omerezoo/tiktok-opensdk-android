/**
 * settings 辅助工具类
 *
 * 1.配置决定是否include project
 * 2.自动clone 相关git repo
 *
 */

import groovy.json.JsonBuilder
import org.apache.tools.ant.types.Commandline

def awaysUpdateGit = "git.awaysUpdateGit"
def resetAndCleanGit = "git.resetAndCleanGit"

def initLocalProperty = {
    if (System.getProperty("LOCAL_INIT") != "true") {
        try {
            FileInputStream fileInputStream = new FileInputStream("$rootDir/local.properties")
            System.getProperties().load(fileInputStream)
            System.setProperty("LOCAL_INIT", "true")
        } catch (e) {
            println("initLocalProperty e:" + e)
            return
        }
    }
}

initLocalProperty()

class IncludeMan {
    String key
    String path
    boolean visible = true
    String git
    String gitPath
    String gitBranch
    String gitUrl
    String gitCmdAfterClone

    @Override
    String toString() {
        try {
            return new JsonBuilder(this).toPrettyString()
        } catch (ignore) {
            return ""
        }
    }
}

def execCommandWithReturn = { String commandline, File dir ->
    println "\nwait ... dir : ${dir}"
    println "wait ... current exec command : ${commandline}"
    Process process = Commandline.translateCommandline(commandline).execute(null, dir)
    def out = new StringBuffer()
    def err = new StringBuffer()
    process.consumeProcessOutput(out, err)
    process.waitFor()
    if (out.size() > 0) println "output ${out.size() > 2000 ? out.substring(0, 2000) + "\n........." : out}"
    if (err.size() > 0) println "error output ${err}"
    int exitCode = process.exitValue()
    println "exec command ${commandline} ,exitCode ${exitCode}"
    if (process.exitValue() != 0) {
        throw new RuntimeException("exec ${commandline} error")
    }
    return out.toString()
}

/**
 * @params key project的名称 如aweme-base， app等，无需分号
 * @params objects 不定参配置
 *                 1.只有一个参数
 *                      1.类型为字符串，识别为project的路径，如registerInclude("aweme-base", './module/aweme-base')
 *                      2.类型为Closure，识别为IncludeMan映射对象。如：registerInclude("app.linkmic_plugin", {
 *                                                                            path = './module/linkmic_plugin'
 *                                                                            visible = System.getProperty("code.app.linkmic_plugin") == 'true'})
 *                 2.两个参数，参数1识别为路径，参数2识别为IncludeMan映射对象。如：registerInclude("im.service", System.getProperty("code.im.service.path", '../aweme_im/im_service'), {
 *                                                                            git = "git@code.byted.org:ugc-android/aweme_im.git"
 *                                                                            gitPath = '../aweme_im'
 *                                                                            gitBranch = 'feature/v360_relation'
 *                                                                            visible = System.getProperty("code.im") == 'true'})
 */
ext.registerInclude = { String key, Object... objects ->
    assert key != ''
    assert objects != null && objects.size() > 0

    def object
    def objectPath
    if (objects.size() == 1) {
        object = objects[0]
    } else if (objects.size() == 2) {
        objectPath = objects[0]
        object = objects[1]
    }

    IncludeMan includeMan = new IncludeMan()
    includeMan.key = key
    if (object != null) {
        if (object instanceof Closure) {
            object.setDelegate(includeMan)
            object.setResolveStrategy(Closure.DELEGATE_FIRST)
            object.call()
        } else {
            assert object instanceof String
            includeMan.path = object
        }
    }
    if (!includeMan.key.startsWith(":")) {
        includeMan.key = ":" + includeMan.key
    }
    if (objectPath != null && objectPath != '') {
        includeMan.path = objectPath
    }
    if (!includeMan.visible) {
        return
    }
    settings.include includeMan.key
    print " \ninclude >> " + includeMan.key
    if (includeMan.path != null && includeMan.path != '') {
        if (includeMan.git != null && includeMan.git != '') {
            // 新仓库，执行 clone 和 checkout branch
            if (!new File(includeMan.gitPath).exists()) {
                new File(includeMan.gitPath).mkdirs()
                execCommandWithReturn("git clone ${includeMan.git} ${includeMan.gitPath} ", new File(includeMan.gitPath))
                execCommandWithReturn("git checkout ${includeMan.gitBranch}", new File(includeMan.gitPath))
                // 如果有自定义的命令也执行
                if (includeMan.gitCmdAfterClone != null && includeMan.gitCmdAfterClone != '') {
                    execCommandWithReturn("${includeMan.gitCmdAfterClone}", new File(includeMan.gitPath))
                }
            } else if (System.getProperty("$awaysUpdateGit", 'false') == 'true') {
                // 重置所有改动，还原到branch
                if ((System.getProperty("$resetAndCleanGit", 'false') == 'true')) {
                    execCommandWithReturn("git reset --hard HEAD", new File(includeMan.gitPath))
                    execCommandWithReturn("git clean -df", new File(includeMan.gitPath))
                }
                // checkout 和 fetch
                execCommandWithReturn("git checkout ${includeMan.gitBranch}", new File(includeMan.gitPath))
                execCommandWithReturn("git fetch", new File(includeMan.gitPath))
                // 如果有自定义的命令也执行
                if (includeMan.gitCmdAfterClone != null && includeMan.gitCmdAfterClone != '') {
                    execCommandWithReturn("${includeMan.gitCmdAfterClone}", new File(includeMan.gitPath))
                }
            }
        }
        settings.project(includeMan.key).projectDir = new File(includeMan.path)
    }
}