apply plugin: 'digital.wup.android-maven-publish'

def mavenPublications = []

publishing {
    repositories {
        maven {
            url = BuildContext.isSnapshot() ? SNAPSHOT_REPOSITORY_URL :
                    BuildContext.isInternal() ? INTERNAL_RELEASE_REPOSITORY_URL : ""
            credentials {
                username = BuildContext.isChina() ? INTERNAL_USERNAME : ""
                password = BuildContext.isChina() ? INTERNAL_PASSWORD : ""
            }
        }
    }
    publications {
        if (project.plugins.hasPlugin("com.android.library")) {
            android.libraryVariants.all { variant ->
                if (variant.name.toLowerCase().contains("release")) {

                    def javadoc = task("${variant.flavorName}Javadoc", type: Javadoc) {
                        source = variant.javaCompile.source
                        exclude '**/BuildConfig.java'
                        exclude '**/R.java'
                        classpath += files(variant.javaCompile.classpath.files) + files(android.bootClasspath)
                    }

                    def javadocJar = project.tasks.create("${variant.flavorName}JavadocJar", Jar) {
                        classifier = 'javadoc'
                        from javadoc.destinationDir
                    }

                    def sourceDirs = variant.sourceSets.collect {
                        it.javaDirectories // Also includes kotlin sources if any.
                    }
                    def sourcesJar = project.tasks.create("${variant.flavorName}SourcesJar", Jar) {
                        classifier = 'sources'
                        from sourceDirs
                    }

                    mavenPublications += "${variant.flavorName.capitalize()}AAR"
                    println mavenPublications
                    "${variant.flavorName.capitalize()}AAR"(MavenPublication) {
                        // Gets android component for build variant
                        from components.getByName("android${variant.name.capitalize()}")
                        artifact javadocJar
                        artifact sourcesJar
                        groupId GROUP_ID
//                        if (BuildContext.isChina()) {
                        artifactId ARTIFACT_ID
//                        } else {
//                            artifactId "${ARTIFACT_ID}-overseas"
//                        }
                        if (!BuildContext.isSnapshot()) {
                            if (BuildContext.isChina()) {
                                version ARTIFACT_CHINAL_VERSION
                            } else {
                                version ARTIFACT_OVERSEAS_VERSION
                            }
                        } else {
                            if (BuildContext.isChina()) {
                                version "${ARTIFACT_CHINAL_VERSION}-SNAPSHOT"
                            } else {
                                version "${ARTIFACT_OVERSEAS_VERSION}-SNAPSHOT"
                            }
                        }
                        pom.withXml {
                            def depsNode = asNode()["dependencies"][0]
                            if (depsNode != null) {
                                ArrayList list = new ArrayList()
                                depsNode.each { node ->
                                    if (node.groupId.toString().contains(rootProject.name)
                                            && (node.artifactId.toString().contains("bridge")
                                            || node.artifactId.toString().contains("platforms.platform"))) {
                                        list.add(node)
                                    }
                                }
                                for (def node : list) {
                                    depsNode.remove(node)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

bintray {
    user = 'adminByteDance'
    key = '28d174551141db323784d7237f2922ce3e308350'
    // 这里的publications字段，注册的就是上面的publication名字，是数组，每次gradle bintrayUpload都会把这里配置的所有publication给发布到bintray中
    publications = ['OverseasAAR']
    override = false
    pkg {
        // organization,各自申请的地址
        userOrg = 'aweme-open-sdk-team'
        // 这里就是我们的目标bintray repo，比如G项目目前对外的是public
        repo = 'public'
        // 这个似乎影响不大，bintray上显示的名字
        name = 'AwemeOpenSDK'
        description = "AwemeOpenSDK"
        // license和下面的vcsUrl一定要配置，否则会失败
        licenses = ['Apache-2.0']
        vcsUrl = 'https://bintray.com/beta/#/aweme-open-sdk-team/public/AwemeOpenSDK'
        // 这个需要为true
        publish = true
        publicDownloadNumbers = true
        dryRun = false
        version {
            name = ARTIFACT_OVERSEAS_VERSION
        }
    }
}